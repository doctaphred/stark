say Hello, world!

# ayy

# Inline tests!
alias => expect

ignore x
=> None

lit x
=> 'x'
set x lit x
show x x

list x
=> ('x',)

first a b c
=> 'a'

last a b c
=> 'c'

pyeval 'ayy'
=> 'ayy'
pyeval {{'a': 2, 'b': 2}}
=> {{'a': 2, 'b': 2}}

pyexec {ayy = 'lmao'}
pyeval ayy
=> 'lmao'

pyset lol wut
pyget lol
=> 'wut'


# Ideas not yet implemented
alias -> ignore
alias + ignore

set x int 1
set step int 1
set end int 10
while {ne x end} {
    show x
    set x sum x step
}

def greet {
    say hey
    say howdy
    say hey
}
+ doc {Say hello}
+ test {
    greet
    -> {
        hey
        howdy
        hey
    }
    => None
}

greet


alias -> ignore

set name lit world!
# name: lit world!
say Hello, :name
-> Hello, world!

set {a y y} lit {l m a o}
say :{a y y}
-> l m a o

# x: int 1
# set :x int 1

set print get say
print hello
-> hello

set print lit say
:print hello
-> hello

# print: :say
# print hello
# -> hello

# blah
#

# set code read text.stark
# exec code

# set newcode str {say ayy}
# # newcode: str {say ayy}
# write newcode.stark get newcode
# # get newcode > write newcode.stark

# # say nothing
# # nothing > say
